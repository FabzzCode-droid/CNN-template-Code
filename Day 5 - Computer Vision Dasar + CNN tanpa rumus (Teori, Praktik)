{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNinPe7V3SgMcrpoQJ5EYoJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Teori CNN dan CV dasar\n","<p>🤖 Bagaimana Komputer \"Melihat\" Gambar?</p>\n","Komputer tidak melihat gambar seperti manusia.\n","Bagi komputer, gambar hanyalah sekumpulan angka.\n","Setiap gambar terdiri dari piksel (kotak-kotak kecil).\n","\n","Gambar hitam-putih:\n","\n","1 piksel = 1 angka (0 = hitam, 255 = putih)\n","\n","Gambar berwarna:\n","\n","1 piksel = 3 angka (merah, hijau, biru)\n","\n","<p>Contoh:</p>\n","<p style=\"font-size: medium;\">📷 Gambar ukuran 28x28 = 784 angka</p>\n","<p style=\"font-size: medium;\">🧠 Ini seperti spreadsheet Excel, berisi angka antara 0–255</p>\n","\n","<p>🧱 Apa itu CNN (Convolutional Neural Network)?</p>\n","CNN adalah otak AI khusus untuk mengenali gambar.\n","\n","Bayangkan CNN sebagai:\n","\n","🔍 Filter: Menyorot bagian penting dari gambar (misalnya ujung angka, garis, pola)\n","\n","📉 Penyaring: Mengurangi ukuran gambar tapi menyimpan bagian penting\n","\n","🧠 Pemutus akhir: Mengambil keputusan, misalnya \"gambar ini angka 3\"\n","\n","Cara kerjanya mirip otak manusia:\n","\n","Pertama-tama melihat garis kasar\n","\n","Lalu bentuk\n","\n","Lalu detail\n","\n","Lalu membuat kesimpulan: \"Oh ini angka 7!\"\n","\n","🔁 Ringkasnya:\n","Komponen\tFungsi Utama\n","Piksel (angka)\tRepresentasi gambar\n","Filter CNN\tMenemukan pola (tepi, bentuk)\n","Pooling Layer\tMenyederhanakan data, tetap esensial\n","Dense Layer (Output)\tMengambil keputusan akhir (klasifikasi)\n","\n","🎯 Kesimpulan:\n","CNN mengubah gambar → angka → pola → keputusan.\n","\n","Kamu tidak perlu tahu rumus, cukup pahami bahwa AI belajar pola visual dari angka-angka dalam gambar — persis seperti anak kecil belajar mengenali angka lewat melihat bentuknya berulang-ulang."],"metadata":{"id":"lv5NIE4g-qix"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"evQ6OxiI0FiD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747292565078,"user_tz":-420,"elapsed":395133,"user":{"displayName":"Fabio Beneamata","userId":"17629259940341622768"}},"outputId":"23eb61a1-d8c0-48b4-d30d-18d7cbff916c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m68s\u001b[0m 35ms/step - accuracy: 0.9122 - loss: 0.2862 - val_accuracy: 0.9856 - val_loss: 0.0448\n","Epoch 2/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m75s\u001b[0m 31ms/step - accuracy: 0.9875 - loss: 0.0406 - val_accuracy: 0.9882 - val_loss: 0.0350\n","Epoch 3/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 30ms/step - accuracy: 0.9913 - loss: 0.0272 - val_accuracy: 0.9907 - val_loss: 0.0311\n","Epoch 4/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 32ms/step - accuracy: 0.9938 - loss: 0.0196 - val_accuracy: 0.9906 - val_loss: 0.0313\n","Epoch 5/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m78s\u001b[0m 30ms/step - accuracy: 0.9961 - loss: 0.0123 - val_accuracy: 0.9894 - val_loss: 0.0322\n","\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 9ms/step - accuracy: 0.9871 - loss: 0.0402\n","Test accuracy: 0.99\n"]}],"source":["#import dataset\n","from tensorflow.keras.datasets import mnist\n","\n","# Load data\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","\n","# Normalisasi piksel\n","x_train = x_train / 255.0\n","x_test = x_test / 255.0\n","\n","# Tambahkan channel (1) karena grayscale\n","x_train = x_train.reshape(-1, 28, 28, 1)\n","x_test = x_test.reshape(-1, 28, 28, 1)\n","\n","# Model CNN dengan code sederhana Conv2D, MaxPooling2D, Flatten, Dense\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense #Arsitektur penting\n","\n","model = Sequential([\n","    Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)),\n","    MaxPooling2D(pool_size=(2,2)),\n","\n","    Conv2D(64, kernel_size=(3,3), activation='relu'),\n","    MaxPooling2D(pool_size=(2,2)),\n","\n","    Flatten(),\n","    Dense(128, activation='relu'),\n","    Dense(10, activation='softmax')  # 10 kelas: angka 0–9\n","])\n","\n","# Training Model menggunakan Batch Training (32)\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","\n","model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))\n","\n","# Evaluation & Execution\n","test_loss, test_accuracy = model.evaluate(x_test, y_test)\n","print(f\"Test accuracy: {test_accuracy:.2f}\")\n"]},{"cell_type":"markdown","source":["A. Arsitketur penting CNN MNIST\n","\n","1. 📸 Conv2D (Convolutional Layer)\n","Fungsi:\n","Menangkap pola visual seperti tepi, lengkungan, dan garis.\n","\n","Analogi:\n","Bayangkan kamu melihat gambar angka dengan kaca pembesar yang hanya fokus ke bagian kecil—dari situ kamu mencoba mengenali \"pola kecil\" seperti garis vertikal atau lengkungan.\n","\n","Cara Kerja:\n","Conv2D menggeser filter (atau kernel) kecil di seluruh gambar.\n","\n","Setiap filter belajar mendeteksi fitur visual spesifik.\n","\n","Hasilnya disebut feature map.\n","\n","2. 🧽 MaxPooling2D (Pooling Layer)\n","Fungsi:\n","Menyederhanakan ukuran data, sambil mempertahankan informasi penting.\n","\n","Analogi:\n","Kamu punya foto besar, lalu kamu crop jadi kecil tapi tetap menjaga bagian pentingnya saja. Jadi kamu “membuang detail yang terlalu kecil”.\n","\n","Cara Kerja:\n","Biasanya ambil nilai maksimal dari blok kecil (misalnya 2×2).\n","\n","Ini mengurangi ukuran gambar, mempercepat proses, dan mencegah overfitting.\n","\n","3. 📄 Flatten\n","Fungsi:\n","Mengubah gambar 2D hasil convolution/pooling menjadi 1D array agar bisa diproses oleh lapisan fully-connected (Dense).\n","\n","Analogi:\n","Bayangkan kamu meratakan kertas gambar dan menjadikannya daftar angka.\n","\n","4. 🧠 Dense (Fully Connected Layer)\n","Fungsi:\n","Melakukan proses pengambilan keputusan akhir—seperti klasifikasi.\n","\n","Analogi:\n","Setelah semua informasi visual diproses, bagian ini seperti otak akhir yang memutuskan: \"gambar ini angka 7!\" atau \"gambar ini angka 3!\"\n","\n","Output:\n","Misalnya Dense(10, activation='softmax') artinya ada 10 kelas angka (0–9), dan model akan mengeluarkan probabilitas untuk masing-masing."],"metadata":{"id":"DJo_DDsBgrKS"}},{"cell_type":"markdown","source":["B. Konsep Batch Training - Epoch\n","<p>📦 Jumlah Dataset MNIST:\n","<p>Dataset MNIST terdiri dari:\n","\n","60.000 gambar untuk training (x_train)\n","\n","10.000 gambar untuk testing (x_test)\n","\n","Setiap gambar:\n","\n","Berukuran 28x28 piksel\n","\n","Bertipe grayscale\n","\n","Berisi angka dari 0 sampai 9 (total 10 kelas)\n","\n","🔍 Lalu, apa itu angka 1875/1875 yang muncul di output?\n","<p>Itu adalah jumlah batch per epoch, bukan jumlah data keseluruhan.\n","\n","Penjelasan:\n","\n","Model dilatih dengan metode batch training (data dibagi menjadi kelompok kecil).\n","\n","Default batch size biasanya 32.\n","\n","Jika total data training adalah 60.000 dan batch size 32:\n","\n","\n","60.000 / 32 ≈ 1875 batch\n","Jadi:\n","\n","1875/1875 berarti sedang memproses batch ke-1875 dari total 1875 batch dalam 1 epoch.\n","\n","✅ Ringkasan:\n","\n","Total data: 60.000 training + 10.000 testing\n","\n","1875 = jumlah batch per epoch (dengan batch size sekitar 32)\n","\n","Setiap data adalah gambar angka tulisan tangan (0–9)\n","\n"],"metadata":{"id":"jinW2Reziyn9"}},{"cell_type":"markdown","source":["✅ Kesimpulan Proyek Day 5: CNN & MNIST\n","<p>📌 Tujuan:\n","<p>Membuat model Convolutional Neural Network (CNN) untuk mengenali angka tulisan tangan (0–9) menggunakan dataset MNIST.\n","\n","📊 Hasil Akhir:\n","\n","Model dilatih selama 5 epoch.\n","\n","Akurasi validasi mencapai 99.10% di epoch ke-4.\n","\n","Evaluasi akhir menunjukkan Test Accuracy: 0.99 (99%).\n","\n","Model sangat baik dalam mengenali gambar angka tulisan tangan.\n","\n","📈 Insight:\n","\n","CNN sangat cocok untuk mengenali pola visual seperti gambar.\n","\n","Dengan arsitektur sederhana (Conv2D → MaxPooling → Flatten → Dense), kita sudah bisa meraih akurasi tinggi.\n","\n","Overfitting belum terjadi karena akurasi training dan validasi relatif seimbang.\n","\n","🧠 Pelajaran Inti:\n","\n","Preprocessing (normalisasi, reshape) penting.\n","\n","CNN mengenali pola spasial dengan sangat efisien.\n","\n","MNIST adalah dataset dasar yang bagus untuk memahami Computer Vision sebelum masuk ke gambar kompleks (misalnya CIFAR, ImageNet, dsb)."],"metadata":{"id":"c-zaFpW5jWgf"}}]}